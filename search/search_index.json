{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Home","text":"<p>Warpgate is a smart SSH, HTTPS, MySQL and PostgreSQL bastion host for Linux that doesn't need special client apps.</p> <ul> <li>Set it up in your DMZ, add user accounts and easily assign them to specific hosts and URLs within the network.</li> <li>Warpgate will record every session for you to view (live) and replay later through a built-in admin web UI.</li> <li>Not a jump host - forwards your connections straight to the target instead.</li> <li>Native 2FA and SSO support (TOTP &amp; OpenID Connect)</li> <li>Single binary with no dependencies.</li> <li>Written in 100% safe Rust.</li> </ul>"},{"location":"#start-here","title":"Start here","text":"<ul> <li>Getting started</li> <li>Getting started on Docker</li> <li>Adding an SSH target</li> <li>Adding a HTTP target</li> <li>Adding a MySQL target</li> <li>Adding a PostgreSQL target (v0.11+)</li> <li>User authentication and roles</li> </ul>"},{"location":"#authentication","title":"Authentication","text":"<ul> <li>OTP (2 factor authentication)</li> <li>Using tickets</li> <li>SSO Authentication(v0.5+)</li> </ul>"},{"location":"#other-topics","title":"Other topics","text":"<ul> <li>Installing as a systemd service</li> <li>Chaining Warpgates together</li> <li>Protocol support</li> <li>Log forwarding</li> <li>Warpgate behind a reverse proxy</li> </ul>"},{"location":"accessing-the-admin-ui/","title":"Accessing the admin ui","text":"<p>To access the admin UI, navigate to <code>https://&lt;warpgate&gt;:&lt;http port&gt;/@warpgate/admin</code> and log in with your admin user's credentials.</p>"},{"location":"behind-reverse-proxy/","title":"Behind reverse proxy","text":"<p>Warpgate doesn't need any specific configuration except in the following case:</p> <ul> <li>When using single sign-on, make sure your reverse proxy supplies the correct <code>Host</code> and <code>X-Forwarded-Proto</code> headers - this allows Warpgate to construct correct redirect URLs.</li> <li>Set <code>http.trust_x_forwarded_headers</code> to <code>true</code> in the config file.</li> </ul> <p>Example for NGINX:</p> <pre><code>server {\n    server_name warpgate.acme.inc;\n    listen *:443 http2 ssl;\n    ssl_certificate ...;\n    ssl_certificate_key ...;\n\n    location /  {\n                proxy_pass https://192.168.10.1:8888;\n                proxy_set_header Host $http_host;\n                proxy_set_header X-Forwarded-Proto $scheme;\n                proxy_http_version 1.1;\n    }\n}\n\n</code></pre>"},{"location":"chaining-warpgate/","title":"Chaining Warpgate","text":"<p>Sometimes exposing a host on the network to the outside is not an option. In this case you can opt to forward connections from one Warpgate to another.</p> <p>Note: this is transparent to the client (except for the double \"warpgate connected\" message in interactive sessions) - there are no SSH \"jump hosts\" involved in this setup.</p>"},{"location":"chaining-warpgate/#copy-outer-warpgates-public-key","title":"Copy outer Warpgate's public key","text":"<ul> <li>Run <code>warpgate client-keys</code> and copy the Ed25519 public key:</li> </ul> <pre><code>\u279c  ~ warpgate client-keys\n16:55:10  INFO Using config: \"/etc/warpgate.yaml\" (users: 1, targets: 6, roles: 1)\nWarpgate SSH client keys:\n(add these to your target's authorized_hosts file)\n\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAxxxx+3RBsT5  # &lt;-- this line\nrsa-sha2-256 AAAADHJzYS1zaGEyLTI1Ngxxxx\n</code></pre>"},{"location":"chaining-warpgate/#set-up-inner-warpgate","title":"Set up inner Warpgate","text":"<ul> <li>Add your targets as usual (in this example: <code>inner-server</code>).</li> <li>Add a \"jump user\" (here we'll be using <code>wg-jump</code> as a username) and add the outer Warpgate's public key as a credential.</li> <li>Check connection to the target with <code>warpgate test-target inner-server</code></li> </ul>"},{"location":"chaining-warpgate/#set-up-outer-warpgate","title":"Set up outer Warpgate","text":"<ul> <li> <p>Add the targets on the inner network again, using the inner Warpgate's address and port, as well as the Warpgate-style username:</p> </li> <li> <p>Host: <code>&lt;inner Warpgate's IP&gt;</code></p> </li> <li>Port: <code>&lt;inner Warpgate's SSH port&gt;</code></li> <li>Username: <code>wg-jump:inner-server</code></li> <li>Check your config with <code>warpgate check</code>.</li> <li>Check connection to the target through the inner Warpgate on the outer Warpgate with <code>warpgate test-target inner-server</code></li> </ul>"},{"location":"chaining-warpgate/#connect","title":"Connect","text":"<p>You can now grab the connection command from the landing page (or the admin UI) as usual and test it on a client:</p> <pre><code>ssh &lt;username&gt;:inner-server@&lt;outer-warpgate&gt; -p &lt;outer-wg-port&gt;\n</code></pre>"},{"location":"http-targets-on-separate-domains/","title":"HTTP targets on separate domains","text":"<p>This feature is available in v0.5+</p> <p>Instead of using <code>?warpgate-target=</code> in the URL, you can use multiple domains/hostnames and link each to a specific target.</p> <p>Accessing Warpgate over HTTP on a specific domain will then automatically select the corresponding target.</p> <p>For optimal results, you want to host Warpgate on a common higher-level domain (e.g. <code>wg.acme.inc</code>, as set by the <code>external_host</code> config option), with target-specific domains as subdomains of this one (e.g. <code>gitlab.wg.acme.inc</code>) - this will prevent users from having to log in again when switching between domains (Warpgate will set its session cookie for all subdomains).</p>"},{"location":"http-targets-on-separate-domains/#linking-a-target-to-a-domain","title":"Linking a target to a domain","text":"<p>Set the <code>http.external_host</code> property on the target config:</p> <pre><code>  - name: gitlab\n    allow_roles:\n      - \"warpgate:admin\"\n      - qa\n    http:\n      url: http://10.0.0.2\n+     external_host: gitlab.wg.acme.inc\n</code></pre>"},{"location":"install-as-systemd-service/","title":"Install as systemd service","text":"<p>To add Warpgate to systemd and have it start automatically, run:</p> <pre><code>cat &lt;&lt;EOF &gt; /etc/systemd/system/warpgate.service\n[Unit]\nDescription=Warpgate\nAfter=network.target\nStartLimitIntervalSec=0\n\n[Service]\nType=notify\nRestart=always\nRestartSec=5\nExecStart=/usr/bin/warpgate --config /etc/warpgate.yaml run\n\n[Install]\nWantedBy=multi-user.target\nEOF\n\nsystemctl daemon-reload\nsystemctl enable --now warpgate\n</code></pre>"},{"location":"log-forwarding/","title":"Log forwarding","text":""},{"location":"log-forwarding/#intro","title":"Intro","text":"<p>This feature is available in v0.2+</p> <p>By default, Warpgate logs into its <code>stdout</code>, relying on <code>systemd</code>/<code>journald</code> for log management. However, you can configure it to forward logs to a local log collector through a UNIX Datagram (\"UDP\") socket, e.g. Vector.</p>"},{"location":"log-forwarding/#format","title":"Format","text":"<p>Warpgate will send log records into the socket as separate datagrams, formatted as JSON.</p>"},{"location":"log-forwarding/#example","title":"Example","text":"<p>This example uses Vector as a log collector.</p>"},{"location":"log-forwarding/#set-up-a-listener-socket","title":"Set up a listener socket","text":"<p>In Vector config, add a socket source:</p> <pre><code>[sources.warpgate]\ntype = \"socket\"\npath = \"/var/run/vector-warpgate.sock\"\nmode = \"unix_datagram\"\n</code></pre>   If you just want to try Vector out, here's a full config file that you can run with `vector -c file.toml` that will dump all received log entries to console:   <pre><code>data_dir = \"/var/lib/vector/\"\n\n[sources.source0]\npath = \"/var/run/vector-warpgate.sock\"\nmode = \"unix_datagram\"\ntype = \"socket\"\n\n[transforms.transform0]\ninputs = [\"source0\"]\ndrop_field = true\ndrop_invalid = false\ntype = \"json_parser\"\n\n[sinks.sink0]\ninputs = [\"transform0\"]\ntarget = \"stdout\"\ntype = \"console\"\n\n[sinks.sink0.encoding]\ncodec = \"json\"\n\n[sinks.sink0.healthcheck]\nenabled = true\n\n[sinks.sink0.buffer]\ntype = \"memory\"\nmax_events = 500\nwhen_full = \"block\"\n</code></pre>"},{"location":"log-forwarding/#set-up-forwarding","title":"Set up forwarding","text":"<p>In the Warpgate config, set <code>log.send_to</code>:</p> <pre><code>+ log:\n+   send_to: /var/run/vector-warpgate.sock\n</code></pre> <p>and restart Warpgate.</p>"},{"location":"protocol-support/","title":"Protocol Support","text":""},{"location":"protocol-support/#ssh","title":"SSH","text":"<ul> <li>Ciphers: <code>chacha20-poly1305</code>, <code>aes256-gcm@openssh.com</code></li> <li>Key exchange: <code>curve25519-sha256@libssh.org</code></li> <li>Keys: <code>ssh-ed25519</code>, <code>ssh-rsa</code>, <code>rsa-sha2-512</code>, <code>rsa-sha2-256</code></li> <li>Compression: <code>zlib</code>, <code>zlib@openssh.com</code></li> <li>Tickets \u2705</li> <li>2FA \u2705</li> </ul>"},{"location":"protocol-support/#mysql","title":"MySQL","text":"<ul> <li>MySQL text protocol only (prepared statements are not supported)</li> <li>No MariaDB protocol extensions (such as query progressbars).</li> <li>As server:</li> <li>Identifies itself as MySQL 8.0<ul> <li>(meaning you can use MySQL Workbench even if the target is a MariaDB)</li> </ul> </li> <li>TLS \u2705 (forced)</li> <li><code>mysql_clear_password</code> auth over TLS</li> <li>As client:</li> <li>TLS \u2705 (optional)</li> <li><code>mysql_native_password</code> auth \u2705</li> <li>Tickets \u2705</li> <li>2FA \u274c</li> </ul>"},{"location":"protocol-support/#postgresql","title":"PostgreSQL","text":"<ul> <li>As server:</li> <li>TLS \u2705 (forced)</li> <li><code>password</code> cleartext auth over TLS</li> <li><code>sha256-scram</code> auth \u274c</li> <li>As client:</li> <li>TLS \u2705 (optional)</li> <li><code>password</code> auth \u2705</li> <li><code>md5</code> auth \u2705</li> <li><code>sha256-scram</code> auth \u2705</li> <li>Tickets \u2705</li> <li>2FA \u274c</li> </ul>"},{"location":"protocol-support/#http","title":"HTTP","text":"<ul> <li>HTTP/1.1 \u2705</li> <li>HTTP/2 \u2705</li> <li>TLS \u2705 (as server: forced)</li> <li>Websockets \u2705</li> <li>SSE \u274c</li> <li>Tickets \u2705 (v0.5+)</li> <li>2FA \u2705</li> </ul>"},{"location":"auth/mfa/","title":"Multi-Factor Authentication (TOTP)","text":""},{"location":"auth/mfa/#configuration","title":"Configuration","text":"<p>Log into the Warpgate admin UI and navigate to <code>Config</code> &gt; <code>Users</code> &gt; <code>admin</code> and click <code>Add OTP</code>:</p> <p></p> <p>The QR code shown can now be used to set up a mobile TOTP authenticator app.</p> <p>Once done, click <code>Update configuration</code> to save.</p>"},{"location":"auth/mfa/#credentials-policy-configuration-for-ssh-http","title":"Credentials policy configuration for SSH &amp; HTTP","text":"<p>To specify 2FA policies for SSH or HTTP sessions, uncheck <code>Any credential</code> in the corresponding <code>Auth policy section</code> and select all required credentials:</p> <p></p>"},{"location":"auth/sso/","title":"Single Sign-On (OIDC)","text":"<p>This feature is available in v0.5+</p>"},{"location":"auth/sso/#intro","title":"Intro","text":"<p>Warpgate can use arbitrary OpenID Connect (OIDC) providers to authenticate users based on their verified emails.</p> <p>OIDC providers include, but are not limited to:</p> <ul> <li>Google Accounts</li> <li>Sign in with Apple</li> <li>GitLab</li> <li>Microsoft Azure</li> <li>Okta</li> </ul>"},{"location":"auth/sso/#configuration","title":"Configuration","text":""},{"location":"auth/sso/#external-host-setting-before-v012","title":"External host setting (before v0.12)","text":"<p>To use SSO, Warpgate needs to know what its external hostname is. It'll try its best to figure it out based on the client's request, but it's better if you set it explicitly via the top-level <code>external_host</code> config option:</p> <pre><code>+ external_host: warpgate.acme.inc\n</code></pre> <p><code>external_host</code> can include a port as well</p> <p>Starting with v0.12, Warpgate uses the <code>Host</code> header to determine the external host.</p>"},{"location":"auth/sso/#sso-providers","title":"SSO Providers","text":""},{"location":"auth/sso/#obtaining-app-credentials-from-a-provider","title":"Obtaining app credentials from a provider","text":"<p>You'll need to register your Warpgate instance as an \"app\" (terminology varies per provider) at the provider and obtain a Client ID and a Client secret. You'll need to provide a Redirect URL which - which will be verified by the SSO provider.</p> <p>The redirect URL for Warpgate is <code>https://&lt;warpgate-external-host&gt;/@warpgate/api/sso/return</code>.</p> <p>Okta provides excellent guides on registering an app with various providers:</p> <ul> <li>Google</li> <li>Apple</li> <li>GitLab</li> <li>Microsoft Azure</li> </ul>"},{"location":"auth/sso/#adding-credentials-to-the-config-file","title":"Adding credentials to the config file","text":"<p>With a Client ID and a Client Secret in hand, you can add these to the Warpgate config file:</p>"},{"location":"auth/sso/#google","title":"Google","text":"<pre><code>external_host: warpgate.acme.inc:8888\n\n+ sso_providers:\n+ - name: google\n+   label: Google login\n+   provider:\n+     type: google\n+     client_id: 1234...\n+     client_secret: ABC...\n</code></pre>"},{"location":"auth/sso/#microsoft-azure","title":"Microsoft Azure","text":"<pre><code>external_host: warpgate.acme.inc:8888\n\n+ sso_providers:\n+ - name: azure\n+   provider:\n+     type: azure\n+     client_id: 123...\n+     client_secret: ABC...\n+     tenant: XYZ...\n</code></pre>"},{"location":"auth/sso/#apple-v066","title":"Apple (\u26a0\ufe0f v0.6.6+)","text":"<pre><code>external_host: warpgate.acme.inc:8888\n\n+ sso_providers:\n+ - name: apple\n+   label: Apple ID\n+   provider:\n+     type: apple\n+     team_id: ABC...  # your Apple Team ID\n+     client_id: com.warpgate.test  # your Service ID (not the App ID!)\n+     key_id: ABC...  # the ID of the key you've created\n+     client_secret: ABC...  # Base64 encoded contents of the .p8 private key file you've got from Apple\n\n</code></pre>"},{"location":"auth/sso/#custom","title":"Custom","text":"<pre><code>external_host: warpgate.acme.inc:8888\n\n+ sso_providers:\n+ - name: custom\n+   label: ACME SSO\n+   provider:\n+     type: custom\n+     client_id: 123...\n+     client_secret: ABC...\n+     issuer_url: https://sso.acme.inc,\n+     scopes: [\"email\"],\n</code></pre>"},{"location":"auth/sso/#requiring-sso-for-a-user","title":"Requiring SSO for a user","text":"<p>Users are linked to their SSO accounts based on their email. If the SSO provider advertises email verification status, Warpgate will require the email to be verified.</p> <p>To link a user to SSO, click <code>Add SSO</code> in the credentials section, and then (optionally) set SSO as the only accepted credential type for HTTP connections.</p> <p></p> <p>Here, we've also set SSO to be the only allowed login credential for HTTP auth, and have set SSH to use out-of-band web authentication. </p> <p><code>In-browser auth</code> (OOB web authentication) means that Warpgate will send a login link to the SSH client and will wait for the user to authenticate themselves in a browser. The auth requirements will be the same as set for the <code>http</code> protocol. </p> <pre><code>\u276f ssh cwilde:tnt@warpgate.acme.inc -p 2222   \n----------------------------------------------------------------\nWarpgate authentication: please open https://warpgate.acme.inc:8888/@warpgate#/login/31282192-ad29-4fa7-bdc2-5b481d531e58 in your browser\n----------------------------------------------------------------\n\n(cwilde:tnt@warpgate.acme.inc) Press Enter when done: \n</code></pre> <p></p> <p></p>"},{"location":"auth/sso/#setting-roles-via-sso-v010","title":"Setting roles via SSO (\u26a0\ufe0f v0.10+)","text":"<p>With <code>custom</code> type OIDC providers, Warpgate can also sync the user's role memberships when they log in.</p> <p>For that, your provider must set a <code>warpgate_roles</code> OIDC claim (a JSON array of role names) either in the ID Token or the UserInfo response. By default, Warpgate will use these names as-is and completely overwrite the user's memberships.</p> <p>You can also set <code>role_mappings</code> in the provider's configuration to explicitly map claim values to role names. In this case, only the roles mentioned here will be synced SSO, and the memberships in other roles won't be affected. For example:</p> <pre><code>- name: oidc-custom\n  label: Custom SSO\n  provider:\n    type: custom\n    client_id: ...\n    client_secret: ...\n    issuer_url: ...\n    scopes: []\n    role_mappings:\n      'QA group': 'qa'\n      Admins: 'warpgate:admin'\n</code></pre>"},{"location":"auth/tickets/","title":"Using Tickets","text":"<p>You can issue tickets that grant a specific user access to a specific target, bypassing authorization. This is especially useful for non-interactive sessions where 2FA flows aren't possible, e.g. when connecting an application to a database or an API through Warpgate.</p>"},{"location":"auth/tickets/#creating-a-ticket","title":"Creating a ticket","text":"<p>In the admin UI, create a ticket in the Tickets section, selecting a user account and a target:</p> <p></p> <p>Once the ticket is created, you'll see the protocol-specific connection instructions. In this case, for an HTTP target, the user can pass the ticket through a query parameter or an <code>Authorization</code> header:</p> <p></p>"},{"location":"auth/user-authentication/","title":"User Authentication","text":"<p>In the previous example, we've reused the Warpgate's <code>admin</code> user, which only had a password as its only way to authenticate. Currently, Warpgate supports passwords, public keys or password+public key as authentication methods.</p>"},{"location":"auth/user-authentication/#changing-a-users-password","title":"Changing a user's password","text":"<p>Log into the Warpgate admin UI and navigate to <code>Config</code> &gt; <code>Users</code> &gt; <code>admin</code> and click <code>Change</code> next to the password credential:</p> <p></p>"},{"location":"auth/user-authentication/#adding-a-public-key-for-a-user","title":"Adding a public key for a user","text":"<ul> <li>Grab the user's public key in OpenSSH format (normally, you can just copy the <code>~/.ssh/id_&lt;type&gt;.pub</code> file contents and strip the name, leaving just <code>&lt;key type&gt; &lt;public key bytes&gt;</code>, e.g.:</li> </ul> <pre><code>ssh-ed25519 AAAAC...bD4I\n</code></pre> <ul> <li>Click <code>Add public key</code> and paste it:</li> </ul>"},{"location":"auth/user-authentication/#requiring-multiple-authentication-factors","title":"Requiring multiple authentication factors","text":"<p>Warpgate can require a client to present both a public key and a password.</p> <ul> <li>In the <code>Auth policy</code> &gt; <code>SSH</code> section, uncheck <code>Any credential</code> and select both <code>Password</code> and <code>Key</code>:</li> </ul> <p></p>"},{"location":"auth/user-authentication/#using-roles-to-assign-access","title":"Using roles to assign access","text":"<p>You can use roles to grant a new user access to multiple targets at once (or assign multiple users to a target).</p> <ul> <li>Create and remove roles under <code>Config</code> &gt; <code>Roles</code>.</li> <li>Assign roles to users and targets on their respective configuration pages.</li> </ul>"},{"location":"getting-started/binary/","title":"Getting Started","text":"<ul> <li>Download the binary and save it as <code>/usr/bin/warpgate</code>:</li> <li>a stable/beta release from the Releases page</li> <li>or a nightly build from https://nightly.link/Eugeny/warpgate/workflows/build/main</li> <li>Make it executable:</li> </ul> <pre><code>chmod +x /usr/bin/warpgate\n</code></pre>"},{"location":"getting-started/binary/#setup","title":"Setup","text":"<p>Run <code>warpgate setup</code> and follow the prompts. If you want to use a non-default (<code>/etc/warpgate.yaml</code>) config path, pass it to all <code>warpgate</code> commands via <code>--config &lt;path&gt;</code>.</p> <p>To use an external database (MySQL or PostgreSQL) instead of the built-in SQLite, add <code>--database-url mysql://...</code> or <code>--database-url postgres://...</code>.</p> <p>Note There's also a non-interactive setup mode available (v0.7+) - check out <code>warpgate unattended-setup --help</code></p> <p>Here's what it might look like:</p> <pre><code>$ warpgate setup\n\n13:43:10  INFO Welcome to Warpgate 0.6.0\n13:43:10  INFO Let's do some basic setup first.\n13:43:10  INFO The new config will be written in /etc/warpgate.yaml.\n13:43:10  INFO * Paths can be either absolute or relative to /etc.\n\u2714 Directory to store app data (up to a few MB) in \u00b7 /var/lib/warpgate\n\u2714 Endpoint to listen for SSH connections on \u00b7 0.0.0.0:2222\n\u2714 Endpoint to expose admin web interface on \u00b7 0.0.0.0:8888\n\u2714 Do you want to record user sessions? \u00b7 yes\n\u2714 Set a password for the Warpgate admin user \u00b7 ********\n13:43:28  INFO Generated configuration:\n[...]\n13:43:28  INFO Saved into /etc/warpgate.yaml\n13:43:28  INFO Using config: \"/etc/warpgate.yaml\" (users: 1, targets: 1, roles: 1)\n13:43:28  INFO Generating HTTPS certificate\n13:43:28  INFO \n13:43:28  INFO Admin user credentials:\n13:43:28  INFO   * Username: admin\n13:43:28  INFO   * Password: &lt;your password&gt;\n13:43:28  INFO \n13:43:28  INFO You can now start Warpgate with:\n13:43:28  INFO   warpgate --config /etc/warpgate.yaml run\n</code></pre> <p>If you need to start over, delete or move away the config file and run <code>warpgate setup</code> again.</p> <p>You can now start Warpgate with <code>warpgate run</code> and the output should look like this:</p> <pre><code>$ warpgate run\n\n13:44:13  INFO Warpgate version=0.6.0\n13:44:13  INFO Using config: \"/etc/warpgate.yaml\" (users: 1, targets: 1, roles: 1)\n13:44:13  INFO --------------------------------------------\n13:44:13  INFO Warpgate is now running.\n13:44:13  INFO Accepting SSH connections on 0.0.0.0:2222\n13:44:13  INFO Access admin UI on https://0.0.0.0:8888\n13:44:13  INFO --------------------------------------------\n13:44:13  INFO Listening address=0.0.0.0:2222\n13:44:13  INFO Listening address=0.0.0.0:8888\n</code></pre> <p>Try accessing <code>https://&lt;host&gt;:8888/@warpgate/admin</code> (note the <code>https://</code>) via a browser to confirm that the Admin UI is functional.</p> <p>The default username is <code>admin</code> and the password is the one you've set during setup.</p> <p></p> <p></p>"},{"location":"getting-started/binary/#setting-up-as-a-service","title":"Setting up as a service","text":"<p>On <code>systemd</code>, follow [[Installing as a systemd service]] to configure Warpgate to run as a service.</p>"},{"location":"getting-started/binary/#up-next","title":"Up next","text":"<ul> <li>[[Adding an SSH target]]</li> <li>[[Adding an HTTP target]]</li> </ul>"},{"location":"getting-started/docker/","title":"Getting Started (Docker)","text":""},{"location":"getting-started/docker/#tldr","title":"TL;DR","text":"<ul> <li>Image name: <code>ghcr.io/warp-tech/warpgate</code></li> <li>Image in the GHCR: [[https://github.com/warp-tech/warpgate/pkgs/container/warpgate]]</li> <li>Volumes required: <code>/data</code></li> <li>Ports: 2222 (SSH), 8888 (HTTP), 33306 (MySQL)</li> </ul>"},{"location":"getting-started/docker/#running-with-docker-compose","title":"Running with Docker Compose","text":"<ul> <li>Download the Docker Compose config.</li> <li>Run <code>docker compose run warpgate setup</code> to generate a config file.</li> <li>Run <code>docker compose up</code> to start.</li> </ul>"},{"location":"getting-started/docker/#running-directly-from-the-image","title":"Running directly from the image","text":""},{"location":"getting-started/docker/#storage","title":"Storage","text":"<p>The Warpgate image requires one volume to store its configuration and database in, mounted at <code>/data</code>.</p>"},{"location":"getting-started/docker/#setup","title":"Setup","text":"<pre><code>docker run --rm -it -v &lt;data dir&gt;:/data ghcr.io/warp-tech/warpgate setup\n</code></pre> <p>If you have a valid SSL certificate &amp; key for your domain, now is the best time to replace the self-signed certificate inside the data volume.</p>"},{"location":"getting-started/docker/#running","title":"Running","text":"<pre><code>docker run --rm --name warpgate -p &lt;host https port&gt;:8888 -p &lt;host ssh port&gt;:2222 -it -v &lt;data dir&gt;:/data ghcr.io/warp-tech/warpgate\n</code></pre>"},{"location":"getting-started/docker/#up-next","title":"Up next","text":"<ul> <li>[[Adding an SSH target]]</li> <li>[[Adding an HTTP target]]</li> </ul>"},{"location":"targets/http/","title":"HTTP","text":"<p>This page explains the process of adding a new HTTP target host to Warpgate and allowing users to connect to it.</p>"},{"location":"targets/http/#connection-setup","title":"Connection setup","text":"<p>Log into the Warpgate admin UI and navigate to <code>Config</code> &gt; <code>Targets</code> &gt; <code>Add target</code> and give the new HTTP target a name:</p> <p></p> <p>Fill out the configuration:</p> <ul> <li>Target URL: the destination web service, including the protocol (<code>http://</code> or <code>https://</code>).</li> <li>TLS mode: whether to ignore, prefer or require TLS (overrides the URL's protocol).</li> <li>Verify certificate: whether to reject untrusted certificates.</li> <li>Bind to a domain: link this target to a specific sub-domain of the domain Warpgate is on - see [[HTTP targets on separate domains]]</li> </ul> <p>Example:</p> <p></p> <p>The target should show up on the Warpgate's homepage:</p> <p></p>"},{"location":"targets/http/#accessing-the-target","title":"Accessing the target","text":"<p>Users can either access the target by selecting it on the Warpgate's homepage, with a direct URL:</p> <pre><code>https://&lt;warpgate host&gt;:&lt;port&gt;/?warpgate-target=&lt;name&gt;\n</code></pre> <p>You can also find a copyable URL in the Targets section of the admin UI:</p> <p></p> <p>While the target is active, Warpgate will pass-through all HTTP traffic in this session straight to it. You can return back to the homepage by manually navigating to <code>/@warpgate</code>, or by using the injected session menu (shown below). The menu button can be dragged around to stay out of the way and will remember its location.</p> <p></p>"},{"location":"targets/http/#up-next","title":"Up next","text":"<ul> <li>[[User authentication and roles]]</li> </ul>"},{"location":"targets/mysql/","title":"Adding a MySQL target","text":"<p>This page explains the process of adding a new MySQL target host to Warpgate and allowing users to connect to it.</p>"},{"location":"targets/mysql/#authentication-setup","title":"Authentication setup","text":"<p>Currently, Wargate can connect to MySQL and MariaDB servers with a username/password via the <code>mysql_native_password</code> auth mode.</p> <p>As a MySQL protocol server, Warpgate only allows secure (TLS) connections and uses <code>mysql_clear_password</code> auth mode.</p>"},{"location":"targets/mysql/#enabling-mysql-listener","title":"Enabling MySQL listener","text":"<p>Enable the MySQL protocol in your config file (default: <code>/etc/warpgate.yaml</code>) if you didn't do so during the initial setup:</p> <pre><code>+ mysql:\n+   enable: true\n+   certificate: /var/lib/warpgate/tls.certificate.pem\n+   key: /var/lib/warpgate/tls.key.pem\n</code></pre> <p>You can reuse the same certificate and key that are used for the HTTP listener.</p>"},{"location":"targets/mysql/#connection-setup","title":"Connection setup","text":"<p>Log into the Warpgate admin UI and navigate to <code>Config</code> &gt; <code>Targets</code> &gt; <code>Add target</code> and give the new MySQL target a name:</p> <p></p> <p>Fill out the configuration:</p> <p></p> <p>The target should show up on the Warpgate's homepage:</p> <p></p> <p>Users will be able to click the entry to obtain connection instructions:</p> <p></p>"},{"location":"targets/mysql/#client-setup","title":"Client setup","text":"<p>You can now use any MySQL/MariaDB client applications to connect through Warpgate with the following settings:</p> <ul> <li>Host: the Warpgate host</li> <li>Port: the Warpgate MySQL port (default: 33306)</li> <li>Username: <code>admin#&lt;target-name&gt;</code> or <code>admin:&lt;target-name&gt;</code>, in this example: <code>admin#db1</code></li> <li>Password: your Warpgate admin password</li> <li>TLS: enabled</li> <li>Cleartext password authentication: allowed</li> </ul> <p>If your client uses a database URL, use: <code>mysql://&lt;username&gt;#&lt;target&gt;:&lt;password&gt;@&lt;warpgate host&gt;:&lt;warpgate mysql port&gt;?sslMode=required</code></p> <p>While your MySQL session is running, you'll be able to see its status in the Admin UI, including the query log: </p> <p></p>"},{"location":"targets/mysql/#up-next","title":"Up next","text":"<ul> <li>[[User authentication and roles]]</li> </ul>"},{"location":"targets/postgresql/","title":"Adding a PostgreSQL target","text":"<p>This feature is available in v0.11+</p> <p>This page explains the process of adding a new PostgreSQL target host to Warpgate and allowing users to connect to it.</p>"},{"location":"targets/postgresql/#authentication-setup","title":"Authentication setup","text":"<p>Currently, Warpgate can connect to PostgreSQL servers with a username/password using <code>md5</code> and <code>password</code> (plaintext) auth mode.</p> <p>As a PostgreSQL protocol server, Warpgate only allows secure (TLS) connections and uses <code>password</code> auth mode.</p>"},{"location":"targets/postgresql/#enabling-postgresql-listener","title":"Enabling PostgreSQL listener","text":"<p>Enable the PostgreSQL protocol in your config file (default: <code>/etc/warpgate.yaml</code>) if you didn't do so during the initial setup:</p> <pre><code>+ postgres:\n+   enable: true\n+   certificate: /var/lib/warpgate/tls.certificate.pem\n+   key: /var/lib/warpgate/tls.key.pem\n</code></pre> <p>You can reuse the same certificate and key that are used for the HTTP listener.</p>"},{"location":"targets/postgresql/#connection-setup","title":"Connection setup","text":"<p>Log into the Warpgate admin UI and navigate to <code>Config</code> &gt; <code>Targets</code> &gt; <code>Add target</code> and give the new PostgreSQL target a name:</p> <p></p> <p>Fill out the configuration:</p> <p></p> <p>The target should show up on the Warpgate's homepage:</p> <p></p> <p>Users will be able to click the entry to obtain connection instructions:</p> <p></p>"},{"location":"targets/postgresql/#client-setup","title":"Client setup","text":"<p>You can now use any PostgreSQL client applications to connect through Warpgate with the following settings:</p> <ul> <li>Host: the Warpgate host</li> <li>Port: the Warpgate PostgreSQL port (default: 55432)</li> <li>Username: <code>admin#&lt;target-name&gt;</code> or <code>admin:&lt;target-name&gt;</code>, in this example: <code>admin#db1</code></li> <li>Password: your Warpgate admin password</li> <li>TLS: enabled</li> <li>Cleartext password authentication: allowed</li> </ul> <p>If your client uses a database URL, use: <code>postgresql://&lt;username&gt;#&lt;target&gt;:&lt;password&gt;@&lt;warpgate host&gt;:&lt;warpgate postgresql port&gt;?sslmode=require</code></p> <p>While your PostgreSQL session is running, you'll be able to see its status in the Admin UI, including the query log: </p> <p></p>"},{"location":"targets/postgresql/#up-next","title":"Up next","text":"<ul> <li>[[User authentication and roles]]</li> </ul>"},{"location":"targets/ssh/","title":"Adding an SSH target","text":"<p>This page explains the process of adding a new SSH target host to Warpgate and allowing users to connect to it.</p>"},{"location":"targets/ssh/#authentication-setup","title":"Authentication setup","text":""},{"location":"targets/ssh/#preferred-public-key-auth","title":"Preferred: public-key auth","text":"<p>Warpgate has its own set of SSH keys which the target host must trust in order for connections to work.</p> <p>You can view these keys on the SSH page of the Admin UI, or via the <code>warpgate client-keys</code> CLI command:</p> <p></p> <pre><code>$ warpgate client-keys\n13:59:41  INFO Using config: \"/etc/warpgate.yaml\" (users: 1, targets: 2, roles: 1)\nWarpgate SSH client keys:\n(add these to your target's authorized_keys file)\n\nssh-ed25519 AAAAC3NzaC1lZDI1NTE5AAAAINt47WEjoLc62RyZkSD5IDkyLjdgq2Kbq+UaM+3RBsT5\nrsa-sha2-256 AAAADHJzYS[...]\n</code></pre> <p>The keys are listed in the order of preference. Copy one of them and paste it at the end of the <code>~/.ssh/authorized_keys</code> file on the other side (each target host OS' user has their own <code>authorized_keys</code> file and you will need to create it if it doesn't exist yet).</p>"},{"location":"targets/ssh/#alternative-password-authentication","title":"Alternative: password authentication","text":"<p>Although not recommended, you can use a password to authenticate against a target instead.</p> <p>Isn't storing plaintext passwords unsafe? </p> <p>It's not as long as the config file itself is secure. Warpgate automatically locks down the config file permissions to the bare minimum required.</p>"},{"location":"targets/ssh/#connection-setup","title":"Connection setup","text":"<p>Log into the Warpgate admin UI and navigate to <code>Config</code> &gt; <code>Targets</code> &gt; <code>Add target</code> and give the new target a name:</p> <p></p> <p>Fill out the connection and authentication info and click <code>Update configuration</code>, for example:</p> <p></p> <p>The target should show up on the Warpgate homepage for users that are allowed to access it: </p> <p></p> <p>Users will be able to click the entry to obtain connection instructions:</p> <p></p>"},{"location":"targets/ssh/#client-setup","title":"Client setup","text":"<p>Now, fire up your favorite SSH client and try connecting to Warpgate:</p> <ul> <li>Host: the Warpgate host</li> <li>Port: the Warpgate SSH port (default: 2222)</li> <li>Username: <code>admin:&lt;target-name&gt;</code>, in this example: <code>admin:vm1</code></li> <li>Password: your Warpgate admin password</li> </ul> <p>When connecting for the first time, Warpgate will ask you to check and confirm the target host's SSH host key fingerprint (which you really should do).</p> <p>Here's what it looks like with OpenSSH:</p> <pre><code>$ ssh admin:vm1@192.168.77.253 -p 2222\nadmin:vm1@192.168.77.253's password: \n\n Warpgate  Selected target: vm1\n Warpgate  Host key (ssh-ed25519): AAAAC3[...]\n Warpgate  There is no trusted ssh-ed25519 key for this host.\n Warpgate  Trust this key? (y/n)\n\n \u2713 Warpgate connected   \n\n root ~   $       \n</code></pre> <p>From this point on, you can use this as a normal SSH connection, including SFTP etc.</p> <p>While your SSH session is running, you'll be able to see its status in the Admin UI: </p> <p></p> <p>Click the shell session entry in the Recordings section for a live view and replay of the terminal session:</p> <p></p>"},{"location":"targets/ssh/#up-next","title":"Up next","text":"<ul> <li>[[User authentication and roles]]</li> </ul>"}]}